# Source: argo-rollouts/templates/controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-rollouts
  labels:
    app.kubernetes.io/component: rollouts-controller
    helm.sh/chart: argo-rollouts-2.22.3
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/instance: argo-rollouts
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-rollouts
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: rollouts-controller
      app.kubernetes.io/name: argo-rollouts
      app.kubernetes.io/instance: argo-rollouts
  strategy:
    type: Recreate
  replicas: 2
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8090"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: argo-rollouts
        app.kubernetes.io/instance: argo-rollouts
        app.kubernetes.io/component: rollouts-controller
    spec:
      serviceAccountName: argo-rollouts
      containers:
      - image: "harbor.taco-cat.xyz/tks/argo-rollouts:v1.4.1"
        args:
        - --leader-elect
        imagePullPolicy: IfNotPresent
        name: argo-rollouts
        ports:
        - containerPort: 8090
          name: metrics
        - containerPort: 8080
          name: healthz
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: healthz
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 4
        securityContext:
          {}
        resources:
          {}
      nodeSelector:
        taco-lma: enabled
      securityContext:
        runAsNonRoot: true

